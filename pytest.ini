[pytest]
addopts = -v -s --html=report.html --self-contained-html
testpaths = test
python_files = test_*.py *_test.py

log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_file = test_run.log
log_file_level = INFO


# Arquivo de configuração do Pytest
# Aqui eu deixei tudo configurado pra rodar os testes do projeto
# de forma organizada, com logs e relatório HTML.

# Essas opções são passadas automaticamente toda vez que eu rodo "pytest"
# -v → modo detalhado (mostra o nome e o resultado de cada teste)
# -s → mostra prints e logs no terminal (não bloqueia o stdout)
# --html=report.html → gera um relatório em HTML com o resultado dos testes
# --self-contained-html → deixa o HTML completo (não depende de CSS/JS externos)
# addopts = -v -s --html=report.html --self-contained-html

# Aqui eu digo onde o Pytest deve procurar os testes.
# No meu caso, todos os testes ficam dentro da pasta "test"
# testpaths = test

# Esse padrão define quais arquivos o Pytest vai reconhecer como testes.
# Ele roda tudo que começar com "test_" ou terminar com "_test".
# python_files = test_*.py *_test.py


# Parte de logs no terminal e no arquivo

# Ativa os logs direto no terminal enquanto os testes rodam.
# Assim eu consigo ver mensagens tipo [INFO], [ERROR] em tempo real.
# log_cli = true

# Define o nível mínimo de log que vai aparecer.
# "INFO" já mostra o básico (mensagens de info, avisos e erros).
# Se eu quiser mais detalhes técnicos, posso mudar pra "DEBUG".
# log_cli_level = INFO

# Aqui eu defino o formato dos logs que aparecem no terminal.
# Vai mostrar a hora, o tipo do log (INFO/ERROR/etc.) e a mensagem.
# log_cli_format = %(asctime)s [%(levelname)s] %(message)s

# Também salvo todos os logs em um arquivo chamado "test_run.log"
# Isso é bom pra guardar o histórico das execuções.
# log_file = test_run.log

# Mesmo esquema do log_cli_level, mas pro arquivo.
# Aqui eu deixei INFO, mas posso usar DEBUG se quiser ver mais detalhes.
# log_file_level = INFO
